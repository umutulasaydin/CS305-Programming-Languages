tENDMAIL end[ \t\n]*Mail
tMAIL Mail
tSEND send
tFROM from
tSCHEDULE schedule
tENDSCHEDULE end[ \t\n]*schedule
tTO to
tSET set
tCOMMA ,
tCOLON :
tLPR "("
tRPR ")"
tLBR "["
tRBR "]"
tAT @
tIDENT [A-Za-z_][A-Za-z0-9_]*
tSTRING \"[^"]*\"
tADDRESS [A-Za-z0-9_-][A-Za-z0-9_.^..-]*@[A-Za-z0-9][A-Za-z0-9-]*[A-Za-z0-9][.][A-Za-z0-9][A-Za-z0-9-]*[A-Za-z0-9][.]?[A-Za-z0-9]?[A-Za-z0-9-]*?[A-Za-z0-9]?
tDATE [0-9]{2}[\/][0-9]{2}[\/][0-9]{4}|[0-9]{2}[.][0-9]{2}[.][0-9]{4}|[0-9]{2}[-][0-9]{2}[-][0-9]{4}
tTIME [0-9]{2}:[0-9]{2}
%x comment
%x string
%x incomment
%{
int noOfLines = 1;
int inComment = 0;
int lineComment = 0;
%}
%%
{tENDMAIL} printf("%d_tENDMAIL\n", noOfLines);
{tMAIL} printf("%d_tMAIL\n", noOfLines);
{tSEND} printf("%d_tSEND\n", noOfLines);
{tFROM} printf("%d_tFROM\n", noOfLines);
{tSCHEDULE} printf("%d_tSCHEDULE\n", noOfLines);
{tENDSCHEDULE} printf("%d_tENDSCHEDULE\n", noOfLines);
{tTO} printf("%d_tTO\n", noOfLines);
{tSET} printf("%d_tSET\n", noOfLines);
{tCOMMA} printf("%d_tCOMMA\n", noOfLines);
{tCOLON} printf("%d_tCOLON\n", noOfLines);
{tLPR} printf("%d_tLPR\n", noOfLines);
{tRPR} printf("%d_tRPR\n", noOfLines);
{tLBR} printf("%d_tLBR\n", noOfLines);
{tRBR} printf("%d_tRBR\n", noOfLines);
{tAT} printf("%d_tAT\n", noOfLines);
{tIDENT} printf("%d_tIDENT_(%s)\n", noOfLines, yytext);
\" {
    printf("%d_tSTRING_(",noOfLines);
    BEGIN(string);
}
<string>\" {
    printf(")\n");
    BEGIN(INITIAL);
}
<string>\n {
    noOfLines = noOfLines + 1;
    printf("\n");
}
<string>. {
    printf("%s",yytext);
}

{tADDRESS} printf("%d_tADDRESS_(%s)\n", noOfLines, yytext);
{tDATE} {
    char day[3];
    char month[3];
    char year[5];
    memset(day, '\0', sizeof(day));
    memset(month, '\0', sizeof(month));
    memset(year, '\0', sizeof(year));
    strncpy(day, yytext , 2);
    strncpy(month, yytext +3 , 2);
    strncpy(year, yytext + 6 , 4);
    printf("%d_tDATE_(Day_%s_Month_%s_Year_%s)\n", noOfLines, day, month, year);
}
{tTIME} {
    char hour[3];
    char min[3];
    memset(hour, '\0', sizeof(hour));
    memset(min, '\0', sizeof(min));
    strncpy(hour, yytext,2);
    strncpy(min, yytext+3,2);
    printf("%d_tTIME_(Hour_%s_Minute_%s)\n", noOfLines, hour, min);
}
"/*" {
    inComment = inComment + 1;
    BEGIN(comment);
}
<comment>"/*" {
    inComment = inComment + 1;
}
<comment>"*/" {
    inComment = inComment - 1;
    if (inComment == 0)
    {
        BEGIN(INITIAL);
    }
}
<comment>\n {
    noOfLines = noOfLines + 1;
}
<comment>. printf("");
"*/" {
    printf("%d_ILLEGAL_CHARACTER_(*/)\n", noOfLines);
}
\/\/ {
    BEGIN(incomment);
}
<incomment>\n {

    noOfLines = noOfLines +1;
    BEGIN(INITIAL);
}
<incomment>. printf("");
\n {
    noOfLines = noOfLines + 1;
}
[^\t\n ] printf("%d_ILLEGAL_CHARACTER_(%s)\n",noOfLines, yytext);

. printf("");
%%
#include <stdio.h>
#include <string.h> 
int main()
{
    yylex();
}